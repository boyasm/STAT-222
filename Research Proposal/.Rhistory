load('/Users/matt/Documents/Berkeley/Spring14/STAT 230A/HW1/family.rda')
meanHeight <- mean(fheight)
meanWeight <- mean(fweight)
sdHeight <- sd(fheight)
sdWeight <- sd(fweight)
1/(length(fheight)) * sum(((fheight - meanHeight)/sdHeight) * ((fweight - meanWeight)/sdWeight))
mean(((fheight - meanHeight)/sdHeight) * ((fweight - meanWeight)/sdWeight))
r <- mean((fheight - meanHeight)/sdHeight) * ((fweight - meanWeight)/sdWeight))
r <- mean((fheight - meanHeight)/sdHeight) * ((fweight - meanWeight)/sdWeight)
r
bHat <- r * (sdWeight / sdHeight)
aHat <- meanWeight - bHat * meanHeight
bHat
a sdWeight
sdWeight
(sdWeight / sdHeight)
r * (sdWeight / sdHeight)
r
r <- mean((fheight - meanHeight)/sdHeight) * ((fweight - meanWeight)/sdWeight)
r
r <- mean(((fheight - meanHeight)/sdHeight) * ((fweight - meanWeight)/sdWeight))
r
bHat <- r * (sdWeight / sdHeight)
bHat
aHat
aHat <- meanWeight - bHat * meanHeight
bHat
aHat
sdHeight
regcoef=function(df=family[4:5]){
# This function takes input of a data frame and returns regression
# coefficients predicting the second variable from the first.
meanX <- mean(df[,1])
meanY <- mean(df[,2])
sdX <- sd(df[,1])
sdY <- sd(df[,2])
r <- mean(((df[,1] - meanX)/sdX) * ((df[,2] - meanY)/sdY))
###  Use the formula for correlation given in class/in the book that is unadjusted (not n-1)
bHat <- r * (sdY / sdX)
aHat <- meanY - bHat * meanX
return(c(aHat, bHat))
}
regcoef()
regline=function(df=family[4:5]){
# This function plots points and regression line, doesn't need to return
# anything.
coefs <- regcoef(df)
plot(df[,1], df[,2], type="p")
abline(a=coefs[1], b=coefs[2], col=2)
}
regline()
sqrt(sum((fheight - mean(fheight))^2) / (n - 1))
sqrt(sum((fheight - mean(fheight))^2) / (length(fheight) - 1))
sdHeight <- sd(fheight)
sdHeight
sqrt(sum((fheight - mean(fheight))^2) / (length(fheight)))
mean(sum((fheight - mean(fheight))^2)))
mean(sum((fheight - mean(fheight))^2))
sqrt(mean((fheight - mean(fheight))^2))
regcoef <- function(df=family[4:5]){
# This function takes input of a data frame and returns regression
# coefficients predicting the second variable from the first.
meanX <- mean(df[,1])
meanY <- mean(df[,2])
sdX <- sqrt(mean((df[,1] - mean(df[,1]))^2))
sdY <- sqrt(mean((df[,2] - mean(df[,2]))^2))
r <- mean(((df[,1] - meanX)/sdX) * ((df[,2] - meanY)/sdY))
###  Use the formula for correlation given in class/in the book that is unadjusted (not n-1)
bHat <- r * (sdY / sdX)
aHat <- meanY - bHat * meanX
return(c(aHat, bHat))
}
regcoef()
sd(fheight)*(13/14)
sdHeight
sqrt(var(fheight)*(13/14))
length(fheight)
sdHeight <- sqrt(mean((fheight - mean(fheight))^2))
sdHeight
sqrt(var(fheight)*(13/14))
regline()
regcoef()
lm(fweight~fheight)
regline <- function(df=family[4:5]){
# This function plots points and regression line, doesn't need to return
# anything.
coefs <- regcoef(df)
plot(df[,1], df[,2], type="p", xlab="First Column of Dataframe", ylab="Second Column of Dataframe", main="Regression Plot, HW1")
abline(a=coefs[1], b=coefs[2], col=2)
}
regline()
?update
?jitter
jitter(c(1:5))
View(family)
family$height
fheight
r <- mean(((fheight - meanHeight)/sdHeight) * ((fweight - meanWeight)/sdWeight))
r
cor(fheight, fweight)
cor(fheight, fweight)*(13/14)
bHat <- r * (sdWeight / sdHeight)
aHat <- meanWeight - bHat * meanHeight
bHat
aHat
lm(fweight~fheight)
bHat <- r * (sdWeight / sdHeight)
aHat <- meanWeight - bHat * meanHeight
print(paste("The regression line is: height = ", bHat, " * weight + ", aHat, sep=""))
regcoef <- function(df=family[4:5]){
# This function takes input of a data frame and returns regression
# coefficients predicting the second variable from the first.
meanX <- mean(df[,1])
meanY <- mean(df[,2])
sdX <- sqrt(mean((df[,1] - mean(df[,1]))^2))
sdY <- sqrt(mean((df[,2] - mean(df[,2]))^2))
r <- mean(((df[,1] - meanX)/sdX) * ((df[,2] - meanY)/sdY))
###  Use the formula for correlation given in class/in the book that is unadjusted (not n-1)
bHat <- r * (sdY / sdX)
aHat <- meanY - bHat * meanX
return(c(aHat, bHat))
}
regcoef()
regline <- function(df=family[4:5]){
# This function plots points and regression line, doesn't need to return
# anything.
coefs <- regcoef(df)
plot(df[,1], df[,2], type="p", xlab="First Column of Dataframe", ylab="Second Column of Dataframe", main="Regression Plot, HW1")
abline(a=coefs[1], b=coefs[2], col=2)
}
regline()
regcoef()
sdHeight <- sqrt(mean((fheight - mean(fheight))^2))
sdHeight
sdHeight <- sqrt(mean((fheight - mean(fheight))^2))
sdHeight
r
r <- mean(((fheight - meanHeight)/sdHeight) * ((fweight - meanWeight)/sdWeight))
r
sdWeight
fweight
family$weight
sdWeight <- sqrt(mean((fweight - mean(fweight))^2))
sdWeight
r <- mean(((fheight - meanHeight)/sdHeight) * ((fweight - meanWeight)/sdWeight))
r
bHat <- r * (sdWeight / sdHeight)
aHat <- meanWeight - bHat * meanHeight
print(paste("The regression line is: height = ", bHat, " * weight + ", aHat, sep=""))
